{"version":3,"sources":["Table/CountriesTable.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["CountriesTable","countriesData","data","continents","Set","country","push","key","code","continent","name","flag","countryCode","add","continentsFilter","Array","from","map","text","value","searchInput","useRef","useState","searchText","searchedColumn","search","setSearch","handleSearch","selectedKeys","confirm","dataIndex","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","style","padding","ref","node","placeholder","onChange","e","target","onPressEnter","marginBottom","display","type","onClick","size","width","handleReset","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","columns","title","sorter","a","b","filters","indexOf","className","dataSource","COUNTRIES_QUERY","gql","client","GraphQLClient","App","setData","isLoading","isError","loadingState","setState","useEffect","request","responce","fetchData","then","tip","message","description","countries","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.44695835.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { Table, Input, Button, Space } from \"antd\";\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport Highlighter from \"react-highlight-words\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./CountriesTable.css\";\r\n\r\nconst CountriesTable = ({ countriesData = [] }) => {\r\n  const data = [];\r\n  const continents = new Set();\r\n\r\n  for (let country of countriesData) {\r\n    data.push({\r\n      ...country,\r\n      key: country.code,\r\n      continent: country.continent.name,\r\n      flag: <ReactCountryFlag countryCode={country.code} />,\r\n    });\r\n    continents.add(country.continent.name);\r\n  }\r\n\r\n  const continentsFilter = Array.from(continents).map((continent) => {\r\n    return {\r\n      text: continent,\r\n      value: continent,\r\n    };\r\n  });\r\n\r\n  let searchInput = useRef();\r\n  const [search, setSearch] = useState({ searchText: \"\", searchedColumn: \"\" });\r\n\r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    setSearch({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  const handleReset = (clearFilters) => {\r\n    clearFilters();\r\n    setSearch({ searchText: \"\" });\r\n  };\r\n\r\n  const getColumnSearchProps = (dataIndex) => ({\r\n    filterDropdown: ({\r\n      setSelectedKeys,\r\n      selectedKeys,\r\n      confirm,\r\n      clearFilters,\r\n    }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={(node) => {\r\n            searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) =>\r\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n          }\r\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ marginBottom: 8, display: \"block\" }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Filter\r\n          </Button>\r\n          <Button\r\n            onClick={() => handleReset(clearFilters)}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n  \r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase())\r\n        : \"\",\r\n    onFilterDropdownVisibleChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.select(), 100);\r\n      }\r\n    },\r\n    \r\n    render: text =>\r\n    search.searchedColumn === dataIndex ? (\r\n      <Highlighter\r\n        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n        searchWords={[search.searchText]}\r\n        autoEscape\r\n        textToHighlight={text ? text.toString() : ''}\r\n      />\r\n    ) : (\r\n      text\r\n    ),\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ISO code\",\r\n      dataIndex: \"code\",\r\n      key: \"code\",\r\n      sorter: (a, b) => (a.code > b.code ? 1 : -1),\r\n      ...getColumnSearchProps(\"code\"),\r\n    },\r\n    {\r\n      title: \"Country name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      sorter: (a, b) => (a.name > b.name ? 1 : -1),\r\n      ...getColumnSearchProps(\"name\"),\r\n    },\r\n    { title: \"Country flag\", dataIndex: \"flag\", key: \"flag\" },\r\n    {\r\n      title: \"Continent\",\r\n      dataIndex: \"continent\",\r\n      key: \"continent\",\r\n      sorter: (a, b) => (a.continent > b.continent ? 1 : -1),\r\n      filters: continentsFilter,\r\n      onFilter: (value, record) => record.continent.indexOf(value) === 0,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"countries-table\">\r\n      <Table columns={columns} dataSource={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesTable;\r\n","import React from \"react\";\nimport CountriesTable from \"./Table/CountriesTable\";\nimport { GraphQLClient, gql } from \"graphql-request\";\nimport { useState, useEffect } from \"react\";\nimport { Spin, Alert } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst URL = \"https://countries.trevorblades.com/\";\n\nconst COUNTRIES_QUERY = gql`\n  {\n    countries {\n      code\n      name\n      continent {\n        name\n      }\n    }\n  }\n`;\n\nconst client = new GraphQLClient(URL);\n\nconst App = () => {\n  const [countriesData, setData] = useState();\n  const [loadingState, setState] = useState({\n    isLoading: true,\n    isError: false,\n  });\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setState({ isLoading: true, isError: false });\n        const responce = await client.request(COUNTRIES_QUERY);\n        setData(responce);\n      } catch {\n        setState({ isLoading: false, isError: true });\n      }\n    }\n    fetchData().then(() => {\n      setState({ isLoading: false, isError: false });\n    });\n  }, [setData]);\n\n  if (loadingState.isLoading || loadingState.isError || !countriesData) {\n    return loadingState.isLoading ? (\n      <Spin className=\"loading\" tip=\"Loading\"></Spin>\n    ) : (\n      <Alert\n        className =\"loading\"\n        type=\"error\"\n        message=\"Can't loading data from internet\"\n        description=\"Please, check you internet connection and reboot this page\"\n      />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <CountriesTable countriesData={countriesData.countries} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}